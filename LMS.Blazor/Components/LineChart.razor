@using System.Drawing
@using ChartJs.Blazor.LineChart
@using LMS.Blazor.Util

<div class="mt-3">
    <Chart Config="_config" @ref="_chart"></Chart>
</div>
<div class="my-3">
    <button class="btn btn-primary" @onclick="RandomizeData">Randomize Data</button>
    <button class="btn btn-primary" @onclick="AddDataset">Add Dataset</button>
    <button class="btn btn-primary" @onclick="RemoveDataset">Remove Dataset</button>
    <button class="btn btn-primary" @onclick="AddData">Add Data</button>
    <button class="btn btn-primary" @onclick="RemoveData">Remove Data</button>
</div>


@code {
    private const int InitalCount = 7;
    private LineConfig _config;
    private Chart _chart;

    protected override void OnInitialized()
    {
        _config = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "ChartJs.Blazor Line Chart"
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Hover = new Hover
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Month"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Value"
                            }
                        }
                    }
                }
            }
        };

        IDataset<int> dataset1 = new LineDataset<int>(ChartUtil.RandomScalingFactor(InitalCount))
        {
            Label = "My first dataset",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Red),
            BorderColor = ColorUtil.FromDrawingColor(Color.Red),
            Fill = FillingMode.Disabled
        };

        IDataset<int> dataset2 = new LineDataset<int>(ChartUtil.RandomScalingFactor(InitalCount))
        {
            Label = "My second dataset",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Blue),
            BorderColor = ColorUtil.FromDrawingColor(Color.Blue),
            Fill = FillingMode.Disabled
        };

        var tempList = ChartUtil.Months.Take(InitalCount);
        foreach(var p in tempList)
        {
            _config.Data.Labels.Add(p);
        }
        _config.Data.Datasets.Add(dataset1);
        _config.Data.Datasets.Add(dataset2);
    }

    private void RandomizeData()
    {
        foreach (IDataset<int> dataset in _config.Data.Datasets)
        {
            int count = dataset.Count;
            dataset.Clear();
            List<int> tempList = ChartUtil.RandomScalingFactor(count);
            foreach(var p in tempList)
            {
                dataset.Add(p);
            }
        }

        _chart.Update();
    }

    private void AddDataset()
    {
        string color = ColorUtil.FromDrawingColor(ChartUtil.GetRandomColor());
        IDataset<int> dataset = new LineDataset<int>(ChartUtil.RandomScalingFactor(_config.Data.Labels.Count))
        {
            Label = $"Dataset {_config.Data.Datasets.Count}",
            BackgroundColor = color,
            BorderColor = color,
            Fill = FillingMode.Disabled
        };

        _config.Data.Datasets.Add(dataset);
        _chart.Update();
    }

    private void RemoveDataset()
    {
        IList<IDataset> datasets = _config.Data.Datasets;
        if (datasets.Count == 0)
            return;

        datasets.RemoveAt(datasets.Count - 1);
        _chart.Update();
    }

    private void AddData()
    {
        if (_config.Data.Datasets.Count == 0)
            return;

        string month = ChartUtil.Months[_config.Data.Labels.Count % ChartUtil.Months.Length];
        _config.Data.Labels.Add(month);

        foreach (IDataset<int> dataset in _config.Data.Datasets)
        {
            dataset.Add(ChartUtil.RandomScalingFactor());
        }

        _chart.Update();
    }

    private void RemoveData()
    {
        if (_config.Data.Datasets.Count == 0 ||
            _config.Data.Labels.Count == 0)
        {
            return;
        }

        _config.Data.Labels.RemoveAt(_config.Data.Labels.Count - 1);

        foreach (IDataset<int> dataset in _config.Data.Datasets)
        {
            dataset.RemoveAt(dataset.Count - 1);
        }

        _chart.Update();
    }
}